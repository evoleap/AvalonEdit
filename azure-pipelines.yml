# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

resources:
  repositories:
    - repository: evoleapdevops
      type: github
      name: evoleap/devops
      endpoint: evoleap

jobs:
- job: BuildArtifact
  variables:
    versionNumber: ''
    workingVersion: ''
    symVer: ''
    isRelease: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    verPrefix: ''
    verSuffix: ''
  steps:
    # Pull source code of this repo
    - checkout: self
    # Pull source code of evoleapdevops repo
    - checkout: evoleapdevops
    # Set WorkingVersion.txt and symVer(package’s final version number) based on Version.txt and isRelease
    - template: templates/get-working-version.yml@evoleapdevops
      parameters:
        source: 'AvalonEdit/Version.txt'
        dest: 'AvalonEdit/WorkingVersion.txt'
        var: 'workingVersion'
        symVar: 'symVer'
        repo: devops
        isRelease: $(isRelease)
        verPrefixVar: 'verPrefix'
        verSuffixVar: 'verSuffix'
    # NuGet Authenticate
    - task: NuGetAuthenticate@1
    # Run dotnet restore for every .sln file in the repo (restore from private feed)
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.sln'
        feedsToUse: 'select'
        vstsFeed: $(PrivateFeedId)
    # Run dotnet test in AvalonEdit
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        workingDirectory: 'AvalonEdit'
        arguments: '-c Release /property:Version=$(symVer)'
        projects: 'ICSharpCode.AvalonEdit.sln'
    # Run dotnet build in AvalonEdit
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        workingDirectory: 'AvalonEdit'
        arguments: '-c Release /property:Version=$(symVer)'
        projects: 'ICSharpCode.AvalonEdit.sln'
    # Find all .nupkg files (excluding .symbols.nupkg) and upload it to private feed (use symVer for the package’s final version number)
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '**/*.nupkg;!**/*.symbols.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(PrivateFeedId)
        versioningScheme: byEnvVar
        versionEnvVar: 'symVer'